// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "cginc/defs.cginc"
#include "cginc/consts.cginc"

//For simulataneous scans
#define LOC_VERT 0
#define LOC_INDEX 1


//Map distinct edges (x,y,z) to indexed cell edges (1,4,3)
#define DISTINCT_X 1
#define DISTINCT_Y 4
#define DISTINCT_Z 3

#define INDICES_PER_TRIANGLE 3
#define MAX_DISTINCT_EDGES 3


//Ins
StructuredBuffer<int> triCaseBuffer; //16 ints per case, first int is NUMBER OF triangles, then NUM_TRIS*3 ints of data, then -1's
StructuredBuffer<float4> ballBuffer; //xyz position, w radius
StructuredBuffer<int3> surfaceCompactBuffer;
StructuredBuffer<int> ballHashBuffer;

//Outs
RWStructuredBuffer<float3> attribBuffer;
RWStructuredBuffer<int> indexBuffer;

//Inter-Group sum
RWStructuredBuffer<int> sumBuffer;


int numBalls;
int hashBufferBallBuckets;
int hashBufferBallElemsPerBucket;
float3 cellSize;
float isoValue;
float3 boundsCenter;
float3 boundsExtent;


static groupshared float fieldVert[VOXEL_VERTS_X][VOXEL_VERTS_Y][VOXEL_VERTS_Z]; 
static groupshared uint cellDistinctEdges[VOXEL_VERTS_X][VOXEL_VERTS_Y][VOXEL_VERTS_Z];
static groupshared uint2 intraGroupExclusiveSums[2][VOXEL_VERTS_X*VOXEL_VERTS_Y*VOXEL_VERTS_Z]; //Need one for each VERT, because each thread will lookup in this array
static groupshared int3 voxelID;

static groupshared uint groupVertOffset = 0;
static groupshared uint groupIndexOffset = 0;



//Copied from ComputeHash.compute
int hash(const int3 p, const uint buckets)
{
    uint3 primes = int3(73856093, 19349663, 83492791);
    uint3 v = asuint(p) * primes;

    return (v.x ^ v.y ^ v.z) % buckets;
    
}

float3 vertLerp(uint3 tid, uint a, uint b)
{
    float3 v0 = cubeVerts[a];
    float3 v1 = cubeVerts[b];

    float f_a = fieldVert[tid.x + v0.x][tid.y + v0.y][tid.z + v0.z];
    float f_b = fieldVert[tid.x + v1.x][tid.y + v1.y][tid.z + v1.z];
    float s = (isoValue - f_a) / (f_b - f_a);

    return lerp(v0, v1, s);
}


float3 normalAt(float3 loc)
{
    int hashIdx = hash(voxelID, hashBufferBallBuckets) * (hashBufferBallElemsPerBucket + 1);
    uint numOverlappingBalls = ballHashBuffer[hashIdx];

    float3 acc = 0.0;

    uint pos = 0;
    uint seen = 0;
    while (seen < numOverlappingBalls)
    {
        //Iterate over lowest set bits
        for (uint x = ballHashBuffer[hashIdx + 1 + pos]; x != 0; x &= (x - 1))
        {
            int j = (32 * pos) + firstbitlow(x);
            float3 p = ballBuffer[j].xyz;
            float radius = ballBuffer[j].w;
            float r = distance(loc, p) / radius;
			
			acc += r >= 1 ? 0.0 : -(6.0 / radius) * (loc - p) * (r - 1.0);
            seen++;
        }
        pos++;

    }

    return normalize(acc);
}

float fieldAt(int3 gridVert)
{
    float3 loc = cellSize * gridVert;
    int hashIdx = hash(voxelID, hashBufferBallBuckets) * (hashBufferBallElemsPerBucket + 1);
    uint numOverlappingBalls = ballHashBuffer[hashIdx];

    float acc = 0.0;

    uint pos = 0;
    uint seen = 0;
    while (seen < numOverlappingBalls)
    {
        for (uint x = ballHashBuffer[hashIdx + 1 + pos]; x != 0; x &= (x - 1))
        {
            int j = (32 * pos) + firstbitlow(x);
            float3 p = ballBuffer[j].xyz;
            float radius = ballBuffer[j].w;
            float r = distance(loc, p) / radius;
            acc += r > 1.0 ? 0.0 : 2.0 * (r * r * r) - 3.0 * (r * r) + 1.0;
            seen++;
        }
        pos++;

    }

    return acc;
}

int calcIndex(const uint3 tid)
{
    int cubeIndex = 0;
    for (int i = 0; i < 8; i++)
    {
        uint3 v = tid + cubeVerts[i];
        cubeIndex |= fieldVert[v.x][v.y][v.z] > isoValue ? 1 << i : 0;
    }
    return cubeIndex;
}

uint gatherDistinctEdges(const uint3 tid, const int cubeIndex)
{
    //Set up distinct edges
    uint distinctEdges = 0;
    if (tid.x < VOXEL_CELLS_X) // Limit ourselves to computing distinct edges for cells within  voxel (block/group)
    {
        COND_SET_BIT(distinctEdges, 0, BIT_CHECK(cubeIndex, 0) ^ BIT_CHECK(cubeIndex, 1));
    }
    if (tid.y < VOXEL_CELLS_Y)
    {
        COND_SET_BIT(distinctEdges, 1, BIT_CHECK(cubeIndex, 0) ^ BIT_CHECK(cubeIndex, 4));
    }
    if (tid.z < VOXEL_CELLS_Z)
    {
        COND_SET_BIT(distinctEdges, 2, BIT_CHECK(cubeIndex, 0) ^ BIT_CHECK(cubeIndex, 3));
    }
    return distinctEdges;
}

uint performInclusiveSum(const uint numVerts, const uint numTriangles, const uint intraGroupIndex)
{
    //Scan prefix sums
    intraGroupExclusiveSums[0][intraGroupIndex] = uint2(numVerts, INDICES_PER_TRIANGLE * numTriangles);
    intraGroupExclusiveSums[1][intraGroupIndex] = uint2(0, 0);
    GroupMemoryBarrierWithGroupSync();
    
    //produces INCLUSIVE SUM (but we want exclusive)
    [unroll]
    for (uint s = 1, iter = 0; s <= VOXEL_VERTS_X * VOXEL_VERTS_Y * VOXEL_VERTS_Z; s *= 2, iter++)
    {
        uint2 adder = uint2(0, 0);
        if (intraGroupIndex >= s)
        {
            adder = intraGroupExclusiveSums[iter % 2][intraGroupIndex - s];
        }
        intraGroupExclusiveSums[(iter + 1) % 2][intraGroupIndex] = intraGroupExclusiveSums[iter % 2][intraGroupIndex] + adder;
        GroupMemoryBarrierWithGroupSync();
    }
    return iter % 2;

}

void atomicWriteGroupSum(const uint3 tid, const uint sumBufferIndex, const uint intraGroupIndex)
{
        //Should always be the LAST thread  so prefix sum array location contains the full sum
    if (tid.x == VOXEL_VERTS_X - 1 && tid.y == VOXEL_VERTS_Y - 1 && tid.z == VOXEL_VERTS_Z - 1)
    {
        InterlockedAdd(sumBuffer[LOC_VERT], intraGroupExclusiveSums[sumBufferIndex][intraGroupIndex].x, groupVertOffset);
        InterlockedAdd(sumBuffer[LOC_INDEX], intraGroupExclusiveSums[sumBufferIndex][intraGroupIndex].y, groupIndexOffset);
    }
    GroupMemoryBarrierWithGroupSync();
}

void emitVerts(const uint distinctEdges, const uint sumBufferIndex, const uint intraGroupIndex, const uint3 tid, const int3 gridVert)
{
    //Emit vertices
    int emitVertLoc = groupVertOffset + intraGroupExclusiveSums[sumBufferIndex][intraGroupIndex].x;
    //Map the x,y,z distinct edges
    const uint DISTINCT_EDGE_INDEX_TO_EDGE_INDEX[3] = { DISTINCT_X, DISTINCT_Y, DISTINCT_Z };
    //Emit Up to 3 vertices (attribs)
    [unroll]
    for (int i = 0; i < MAX_DISTINCT_EDGES; i++)
    {
        //Should probably store them as zyx instead of xyz
        if (BIT_CHECK(distinctEdges, i))
        {
            uint edge_index = DISTINCT_EDGE_INDEX_TO_EDGE_INDEX[i];
			float3 relPos = cellSize * (gridVert + vertLerp(tid, 0, edge_index)) - boundsCenter;
            attribBuffer[2 * emitVertLoc] = relPos;
            attribBuffer[2 * emitVertLoc + 1] = normalAt(cellSize * (gridVert + vertLerp(tid, 0, edge_index)));
            emitVertLoc++;
        }
    }

}

void emitTriangles(const uint3 tid, const uint cubeIndex, const uint numTriangles, const uint sumBufferIndex, const uint intraGroupIndex)
{
    int emitTriangleLoc = groupIndexOffset + intraGroupExclusiveSums[sumBufferIndex][intraGroupIndex].y;
    for (uint i = 0; i < numTriangles; i++)
    {
        [unroll]
        for (int j = 0; j < 3; j++)
        {
            int edge = triCaseBuffer[(cubeIndex * 16) + (i * 3) + j];
            uint4 nm = edgeNeighbourTable[edge];

            uint3 borrow_edge_cell = tid + nm.xyz;
            uint borrow_edge_distinct_id = nm.w;
            uint borrow_cell_IntraGroupIndex = borrow_edge_cell.z * (VOXEL_VERTS_X * VOXEL_VERTS_Y) + borrow_edge_cell.y * (VOXEL_VERTS_X) + borrow_edge_cell.x;
            uint borrow_intraGroupOffset_vert = intraGroupExclusiveSums[sumBufferIndex][borrow_cell_IntraGroupIndex].x;

            
            uint borrowedCellDistinctEdges = cellDistinctEdges[borrow_edge_cell.x][borrow_edge_cell.y][borrow_edge_cell.z];

            uint borrow_cell_distinct_prefix = 0;
            for (uint n = 0; n < borrow_edge_distinct_id; n++)
            {
                borrow_cell_distinct_prefix += BIT_CHECK(borrowedCellDistinctEdges, n);
            }

            indexBuffer[(emitTriangleLoc + (i * 3)) + j] = groupVertOffset + borrow_intraGroupOffset_vert + borrow_cell_distinct_prefix;

            
        }
    }
}

[numthreads(VOXEL_VERTS_X, VOXEL_VERTS_Y, VOXEL_VERTS_Z)]
void CSMain (const uint3 gid : SV_GroupID, const uint3 tid : SV_GroupThreadID)
{
    if (tid.x == VOXEL_VERTS_X - 1 && tid.y == VOXEL_VERTS_Y - 1 && tid.z == VOXEL_VERTS_Z - 1)
    {
        voxelID = surfaceCompactBuffer[gid.x];
    }
    GroupMemoryBarrierWithGroupSync();
    uint intraGroupIndex = tid.z * (VOXEL_VERTS_X * VOXEL_VERTS_Y) + tid.y * (VOXEL_VERTS_X) + tid.x;
    int3 gridVert = voxelID * int3(VOXEL_CELLS_X, VOXEL_CELLS_Y, VOXEL_CELLS_Z) + tid;

    fieldVert[tid.x][tid.y][tid.z] = fieldAt(gridVert);
    GroupMemoryBarrierWithGroupSync(); // wait for all threads in group to write their vertex's grid value to shared mem
    
    //Index between 0-255 for lookup in triTable
    const int cubeIndex = calcIndex(tid);

    //uint containing (0/1) for each of a cells 3 'distinct' edges (edges from the cells origin out).
    //Set to 1 if the cell is intersected by isosurface along that edge. (one vert is 'above' isosurface, and the other is 'below')
    // E.g if isosurface passes through edges x and z, then distinctEdges = 0b101
    //                                                                      __xyz
    const uint distinctEdges = gatherDistinctEdges(tid, cubeIndex);
    cellDistinctEdges[tid.x][tid.y][tid.z] = distinctEdges;


    //Get cell vars (numVerts, numTriangles)
    uint numVerts = countbits(distinctEdges);
    uint numTriangles = 0;
    // Num triangles is only meaningful for threads that map to cells in this voxel
    if (tid.x < VOXEL_CELLS_X && tid.y < VOXEL_CELLS_Y && tid.z < VOXEL_CELLS_Z)
    {
        numTriangles = triCaseBuffer[(cubeIndex * 16) + 15];
    }
    
    //[a,b,c...] -> [a, b+a, a+b+c...]
    const uint sumBufferIndex = performInclusiveSum(numVerts, numTriangles,intraGroupIndex);


    //Add Voxel Sums (Total verts, total indices (total triangles * 3)) to Total sum
    //Also calculates the offsets (groupVertOffset, groupIndexOffset) for this group in output Buffers
    atomicWriteGroupSum(tid, sumBufferIndex, intraGroupIndex);

    //Convert to EXCLUSIVE sum
    intraGroupExclusiveSums[sumBufferIndex][intraGroupIndex] -= uint2(numVerts, INDICES_PER_TRIANGLE*numTriangles);

    //Emit up to 3 vertices, 1 for each of the distinct edges of this cell which are intersected by the isosurface
    emitVerts(distinctEdges, sumBufferIndex, intraGroupIndex, tid, gridVert);

    //Emit up to 5 triangles, in the form of Indices (aka numbers, e.g 2038), which index the attrib Buffer, populated earlier by emitVerts()
    emitTriangles(tid, cubeIndex, numTriangles, sumBufferIndex, intraGroupIndex);  
}


