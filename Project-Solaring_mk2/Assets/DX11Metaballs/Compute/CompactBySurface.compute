// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

#include "cginc/defs.cginc"

StructuredBuffer<int3> ballCompactBuffer;
StructuredBuffer<uint> ballHashBuffer;
StructuredBuffer<float4> ballBuffer;

RWStructuredBuffer<int3> surfaceCompactBuffer;
RWStructuredBuffer<int> surfaceSumBuffer;

float isoValue;
float3 cellSize;
int hashBufferBallBuckets;
int hashBufferBallElemsPerBucket;

static groupshared int3 voxelID;
static groupshared int voxelIndex;
static groupshared float2 fieldScan[VOXEL_VERTS_X * VOXEL_VERTS_Y * VOXEL_VERTS_Z];

int hash(const int3 p, const uint buckets)
{
    uint3 primes = int3(73856093, 19349663, 83492791);
    uint3 v = asuint(p) * primes;

    return (v.x ^ v.y ^ v.z) % buckets;
    
}

float fieldAt(int3 gridVert, int3 voxelID)
{
    float3 loc = cellSize * gridVert;
    int hashIdx = hash(voxelID, hashBufferBallBuckets) * (hashBufferBallElemsPerBucket + 1);
    uint numOverlappingBalls = ballHashBuffer[hashIdx];

    float acc = 0.0;

    uint pos = 0;
    uint seen = 0;
    while (seen < numOverlappingBalls)
    {
        for (uint x = ballHashBuffer[hashIdx + 1 + pos]; x != 0; x &= (x - 1))
        {
            int j = (32 * pos) + firstbitlow(x);
            float3 p = ballBuffer[j].xyz;
            float radius = ballBuffer[j].w;
            float r = distance(loc, p) / radius;
            acc += r > 1.0 ? 0.0 : 2.0 * (r * r * r) - 3.0 * (r * r) + 1.0;
            seen++;
        }
        pos++;

    }

    return acc;
}


uint performFieldScan(const float field, const uint intraGroupIndex)
{
    //Scan prefix sums
    fieldScan[intraGroupIndex] = float2(field, field);
  //  fieldScan[1][intraGroupIndex] = float2(1000.0, 0.0);
    GroupMemoryBarrierWithGroupSync();


    [unroll]
    for (uint i = (VOXEL_VERTS_X * VOXEL_VERTS_Y * VOXEL_VERTS_Z)/2; i  > 0; i >>= 1)
    {

        if (intraGroupIndex < i)
        {
            fieldScan[intraGroupIndex].x = min(fieldScan[intraGroupIndex].x, fieldScan[intraGroupIndex + i].x);
            fieldScan[intraGroupIndex].y = max(fieldScan[intraGroupIndex].y, fieldScan[intraGroupIndex + i].y);
        }
        GroupMemoryBarrierWithGroupSync();

    }

    return 0;
      
}


[numthreads(VOXEL_VERTS_X,VOXEL_VERTS_Y,VOXEL_VERTS_Z)]
void CSMain (uint3 gid : SV_GroupID, uint3 tid : SV_GroupThreadID)
{
    if (tid.x == 0 && tid.y == 0 && tid.z == 0)
    {
        voxelID = ballCompactBuffer[gid.x];
    }
    GroupMemoryBarrierWithGroupSync();

    int3 vert = (voxelID * int3(VOXEL_CELLS_X, VOXEL_CELLS_Y, VOXEL_CELLS_Z)) + tid;

    float field = fieldAt(vert, voxelID);

    uint intraGroupIndex = tid.z * (VOXEL_VERTS_X * VOXEL_VERTS_Y) + tid.y * (VOXEL_VERTS_X) + tid.x;

    uint fieldBufferIndex = performFieldScan(field, intraGroupIndex);

    if (tid.x == 0 && tid.y == 0 && tid.z == 0)
    {
        float voxelMin = fieldScan[intraGroupIndex].x;
        float voxelMax = fieldScan[intraGroupIndex].y;
        if ((isoValue < voxelMax) && (isoValue >= voxelMin))
        {
            InterlockedAdd(surfaceSumBuffer[0], 1, voxelIndex);
            surfaceCompactBuffer[voxelIndex] = voxelID;
        }
    }
    GroupMemoryBarrierWithGroupSync();

}
