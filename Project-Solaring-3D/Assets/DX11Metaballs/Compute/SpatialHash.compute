// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

StructuredBuffer<float4> ballBuffer;
RWStructuredBuffer<int3> gridHashBuffer;
RWStructuredBuffer<uint> ballHashBuffer;

uniform float3 voxelSize;
uniform uint numBalls;
uniform uint hashBufferGridBuckets;
uniform uint hashBufferGridElemsPerBucket;
uniform uint hashBufferBallBuckets;
uniform uint hashBufferBallElemsPerBucket;



int hash(const int3 p, const  uint buckets)
{
    uint3 primes = int3(73856093, 19349663, 83492791);
    uint3 v = asuint(p) * primes;

    return (v.x ^ v.y ^ v.z) % buckets;
    
}


bool isGridDuplicate(const int bufIdx, const int start, const int end, const int3 v)
{
    bool duplicate = false;
    for (int i = start; i < end; i++)
    {
        int3 cur = gridHashBuffer[bufIdx + 1 + i];
        if (v.x == cur.x && v.y == cur.y && v.z == cur.z)
        {
            duplicate = true;
        }
    }
    return duplicate;
}


void addToballHashBuffer(int idx, uint v, float3 p, float radius, int3 vox)
{
    uint bufIdx = (hashBufferBallElemsPerBucket + 1) * idx;
    uint pos = v / 32; // which int we set the bit in
    uint bit = v % 32; // which bit to set

    uint was;
    InterlockedOr(ballHashBuffer[bufIdx + 1 + pos], (1 << bit), was);
    bool notSetBefore = ((was >> bit) & 1) == 0;
    if (notSetBefore)
    {
        InterlockedAdd(ballHashBuffer[bufIdx], 1);
    }
}

void addTogridHashBuffer(int idx, int3 v)
{
    int bufIdx = (hashBufferGridElemsPerBucket + 1) * idx;
    bool done = false;
    int prevNum = 0;
    uint curNum = gridHashBuffer[bufIdx].x;

    while (!done)
    {
        done = isGridDuplicate(bufIdx, prevNum, curNum, v) || curNum >= hashBufferGridElemsPerBucket;
        if (!done)
        {
            uint was;
            InterlockedCompareExchange(gridHashBuffer[bufIdx].x, curNum, curNum + 1, was);
            if (was == curNum)
            {
                gridHashBuffer[bufIdx + 1 + curNum] = v;
                done = true;
            }
        }
        prevNum = curNum;
        curNum = gridHashBuffer[bufIdx].x;
    }

}


[numthreads(512,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    if (id.x < numBalls)
    {
        float3 p = ballBuffer[id.x].xyz;
        float r = ballBuffer[id.x].w;
        float3 min_bounds = p - r.xxx;
        float3 max_bounds = p + r.xxx;


        int3 min_voxel = floor(min_bounds / voxelSize);
        int3 max_voxel = ceil(max_bounds / voxelSize);

        for (int i = min_voxel.x; i < max_voxel.x; i++)
        {
            for (int j = min_voxel.y; j < max_voxel.y; j++)
            {
                for (int k = min_voxel.z; k < max_voxel.z; k++)
                {
                    int gridHashIdx = hash(int3(i, j, k), hashBufferGridBuckets);
                    int ballHashIdx = hash(int3(i, j, k), hashBufferBallBuckets);

                    addTogridHashBuffer(gridHashIdx, int3(i, j, k));
                    addToballHashBuffer(ballHashIdx, id.x, p, r, int3(i, j, k));
                }

            }
        }
    }
}
